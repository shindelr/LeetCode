Alice and Bob take turns playing a game, with Alice starting first.

Initially, there is a number n on the chalkboard.
On each player's turn, that player makes a move consisting of:

Choosing any x with 0 < x < n and n % x == 0.
Replacing the number n on the chalkboard with n - x.
Also, if a player cannot make a move, they lose the game.

Return true if and only if Alice wins the game,
assuming both players play optimally.


Example 1:
Input: n = 2
Output: true
Explanation: Alice chooses 1, and Bob has no more moves.

Example 2:
Input: n = 3
Output: false
Explanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.


Constraints:
1 <= n <= 1000

--------------------------------------------------
            Robin's Brainstorming
--------------------------------------------------
We count how many moves it takes to get to n=1, which is the end of the game.

If the number of moves to get there is even, Alice lost.
If the number of moves to get there is odd, Alice won.

The new number, n, is made by moduloing it with a number smaller than the first
n and larger than 0. So a recurrence relation may be:
        n = n - x where n % x is 0.

Are there overlapping sub problems?
I think so? In order to get the new n, we must iterate through all the numbers
up to n over and over again. Maybe we can recursively call all the way down to
n=1, then work our way back up somehow and memoizing the numbers we've done?

Is there an optimal substructure?
No idea.

Base case: n=1
Memo: A hash map using the value of n and what numbers modulo into it?



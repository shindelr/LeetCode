Given an integer n, return the number of strings of length n that consist only
of vowels (a, e, i, o, u) and are lexicographically sorted.

A string s is lexicographically sorted if for all valid i, s[i] is the same as
or comes before s[i+1] in the alphabet.

Example 1:

Input: n = 1
Output: 5
Explanation: The 5 sorted strings that consist of vowels only are
["a","e","i","o","u"].


Example 2:

Input: n = 2
Output: 15
Explanation: The 15 sorted strings that consist of vowels only are
["aa","ae","ai","ao","au","ee","ei","eo","eu","ii","io","iu","oo","ou","uu"].
Note that "ea" is not a valid string since 'e' comes after 'a' in the alphabet.
Example 3:

Input: n = 33
Output: 66045

_____________________________________
    Robin's Brainstorming
_____________________________________

Overlapping Sub-problems:
If n is greater than one, we'll need to state each vowel more than once each
time through the problem. If we memoize those, we'll get close to linear time
right?

Optimal substructure:
Still not so sure about this.

Base Cases:
n == 1?
Since when you hit n == 1, you know exactly what the pattern is: a e i o u

Memo:
It'll be a hash map for the O(1) lookup, and you can use a key to look up a
specific string pattern.

Strategy:
Initialize self.memo
Initialize n

Establish a base case of n = 1
    return there

Check memo for current pattern
If a pattern is in self.memo
return self.memo['']

Otherwise, make some checks to concat each letter less than the current one to
the letter?

